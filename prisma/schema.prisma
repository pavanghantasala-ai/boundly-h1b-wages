// Prisma schema for Boundly
// Provider: PostgreSQL (Supabase/Neon)

generator client {
  provider = "prisma-client-js"
  // Limit binaries to reduce serverless function size on Netlify (Amazon Linux)
  // "native" for local dev, "debian-openssl-3.0.x" for Netlify build/runtime
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?

  accounts      Account[]
  sessions      Session[]
  queryLogs     QueryLog[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WageIndex {
  id        String  @id @default(uuid())
  year      String
  soc       String
  title     String
  areaCode  String
  areaName  String
  unit      String   // 'hourly'
  level1    Decimal  @db.Decimal(12,4)
  level2    Decimal  @db.Decimal(12,4)
  level3    Decimal  @db.Decimal(12,4)
  level4    Decimal  @db.Decimal(12,4)

  @@index([soc])
  @@index([areaCode])
  @@index([title])
}

model QueryLog {
  id            String   @id @default(uuid())
  userId        String?
  createdAt     DateTime @default(now())
  socInput      String
  areaCode      String?
  offeredWage   Decimal  @db.Decimal(12,2)
  offeredUnit   String   // hourly/annual
  computedLevel Int
  lotteryWeight Int
  year          String

  user User? @relation(fields: [userId], references: [id])
}
